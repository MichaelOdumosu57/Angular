template
90° 90°

90° Learning Angular 90°

to set up a reverse proxy look at the location /a in that default.conf file its real easy all you need really is the proxy pass
also you need https://medium.com/@icanhazstring/how-to-properly-get-angular-and-nginx-working-together-for-development-3e5d158734bf
so it can rebuild properly

for a free angular host
https://stackblitz.com/

go to pnpm.org  and use it to download massive packages your Hdd cannot handle


90° Getting Started 90°

run
ng new my-app
accept defaults with accept and return key

cd my-app
ng serve
--open opens the app in your defualt browser
its running

180° editing components 180°
in src/app/app.component.ts
change title to My First Angular App

the css is like regular HTML programming added it to apply  a style


90° Tour of Heroes 90°

270°Angular is made of Components there are modular versios of React but simpler
    the class file is the .ts
    the template file is the .html

270°  replace this with anything you want
      <h1>{{title}}</h1>
      it related to the class file
      so the template puts on the class file like clothes

270°
    src/ is like a global that all components must use
    especially in src styles

270°
    to make a new component
    ng generate component [name of component]
    
360°
    @Component is a decorator function
        selector - the component's CSS element selector
        templateUrl— the location of the component's template file.
        styleUrls— the location of the component's private CSS styles.
        ngOnInit  is a lifecycle hook
        always export the component class
        
270°
    to add a a value for non app
    {{[value]}} with no
    this put between HTML tags is known as interpolation binding
    
270°
    to display a component add it to template for the AppComponet
    insert it
    <h1>{{title}}</h1>
    <app-heroes></app-heroes>

270°
    now we create a hero class
    youre basically importing a class in the example

270°
    now to properly show it
    <h2>{{hero.name | uppercase}} Details</h2>
    <div><span>id: </span>{{hero.id}}</div>
    <div><span>name: </span>{{hero.name}}</div>
    
    which lives in <app-heroes></app-heroes> amazing
    
270°
    users can edit it
    <input [(ngModel)]="hero.name" placeholder="name"/>
    where ngModel binds that
    
180°
    AppModule
    not everything is availbe by default
    this is in app.module.ts and they come as @NgModule decorators
    so you import it in app.module.ts
    import { FormsModule } from '@angular/forms';
    and you add it to the @NgModule decorrator, imports array
    
270°
    every component must be declared in exactly on NgModule declaration
    file:/app/app.module.ts
    
180°
<!--4-->
    A list of Heroes
    this is where typescript is noticeable
    
    files
    /src/app/mock-heroes.ts
    /src/app/heroes/heroes.component.ts
    
    to list use *ngFor
    /src/app/heroes.component.html
    
    never forget the asterick

270°
    event binding
<!--5-->
    files: /heroes.component.ts
        :heroes.component.html
    <li *ngFor="let hero of heroes" (click)="onSelect(hero)">
    

270°
<!--6-->
    however selectedHero does not exist
    use *ngIf to save the app
    files:heroes.component.html
    

270°
    <!--7-->
    stlying specific components in its list
    this is done with class binding
    [class.[className]]="hero === selectedHero"
    files:heroes.component.html
        
180°
    <!--8-->
    you want larger apps to maintain smaller ones
    so there are different component we have differnt ways to attach things
    property biding is present in the subComponent and the @Input decorator is needed to function properly
    files
    files:hero-detail.component.ts
        :hero-detail.component.html
        :heroes.component.html
        

180°
    <!--9-->
    you want services
        they rely on this dependecy injection system
    to do this
    ng generate service hero
    files:hero.service.ts
    files:hero.service.spec.ts
    
    it has a @Injectable decorator
    
270°
    <!--9-->
    this hero service component can grab data from anywhere
    
    you must make this availble to the dependecy injection system (DIS) by regeristing a provider
    provider creates or delivers a services
    HeroService must be registered as the provider of the service you set up an injector which is repsoible for putting
    the service in the right place
    in the Injectable decorator when its provided in the root it can remove it if its not needed
    
270°
    <!--10-->
    instrsting things happen a singleton instance
    now a service is running in your app
    file:heroes.component.ts
    
270°
    <!--11-->
    call the service
    is should be called in ngOnInit not in the constructor, the constructor shouldnt do anything
    so services need to be injected and special care must be taken
    
180°
     <!--12-->
    the service operates sync, but in a real world app we need this done in async, you can use a callback Promise or an Observable
    they are from the RxJS library
    fn returns an Observable<Hero[]> that emits a single value, the array of mock heroes.
    Observable.suscribe() is the async solution here
    files: hero.service.ts
           heroes.component.ts

180°
    <!--13-->
    Showing messages
    bascially executes that the service went through properly
    files:app.component.html
        /src/app/message.service.ts
        /src/app/messages/messages.component.ts
           
    
180°
    <!--14-->
    App routing
    in Angular, the best practice is to load and configure the router in a separate, top-level module that is dedicated to routing and imported by the root AppModule.
--flat puts the file in src/app instead of its own folder.
--module=app tells the CLI to register it in the imports array of the AppModule.
    files: /src/app/app-routing.module.ts
    
270°
    <!--15-->
    Routes
        when you navigate to localhost:4200/heroes you get the HeroesComponent its the same with  nginx routing
        You first must initialize the router and start it listening for browser location changes.
        I removes the Heroes-Component because you only want it when the user navigates to it
        you can make things work by moving codeblocks around
    files:app-routing.module.ts
        files:/src/app/app.component.html
        

180°
    <!--16-->
    Navigation
    add a nav and anchor element
    file:/src/app/app.component.html
    
180°
    <!--17-->
    Add a dashboard
    ng generate component dashboard
    folder /src/app/dashboard
        /src/app/app-routing.module.ts
    
270°
    <!--18-->
    Add a default route
    files: /src/app/app-routing.module.ts
            /src/app/app.component.html
                
270°
    <!--19-->
    add a hero detail route that hides that hero list from the heroes compoinet
    use : for routing parameters
    using interpolation binding to properly connect things
    tie the Heroes Component and Details Component together
    files:/src/app/app-routing.module.ts
        /src/app/dashbord/dashbord.component.html
        
270°
    <!--20-->
    Routable HeroDetailComponent
    now heroe detail needs a way to grab that from the routing and ask the service from HeroService and grab the data it needs from the server
    ActivatedRoute has info about the route
    files:/src/app/hero-detail/hero-detail.component.ts
    
270°
    <!--21-->
    if you go back in the browser you can move around in the app
    files:/src/app/hero-detail/hero-detail.component.ts
          /src/app/hero-detail/hero-detail.component.html
          
180°
    <!--22-->
    using Angular's HttpClient.
    communciate with remote server over http
    for express try to send what the ts fn demands
    file:/src/app/app.module.ts
    